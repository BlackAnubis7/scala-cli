"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3813],{9705:function(e,t,a){a.d(t,{m:function(){return o},v:function(){return s}});var n=a(7294),l=a(2004);function s(e){var t=e.children;return n.createElement("div",{className:"runnable-command"},t)}function o(e){var t=e.url;return n.createElement(l.Z,{playing:!0,loop:!0,muted:!0,controls:!0,width:"100%",height:"",url:t})}},1889:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return r},metadata:function(){return p},toc:function(){return d}});var n=a(3117),l=a(102),s=(a(7294),a(3905)),o=a(9705),i=["components"],r={title:"Format",sidebar_position:15},c=void 0,p={unversionedId:"commands/fmt",id:"commands/fmt",title:"Format",description:"Scala CLI supports formatting your code using Scalafmt:",source:"@site/docs/commands/fmt.md",sourceDirName:"commands",slug:"/commands/fmt",permalink:"/docs/commands/fmt",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/commands/fmt.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{title:"Format",sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"IDE Setup",permalink:"/docs/commands/setup-ide"},next:{title:"Clean",permalink:"/docs/commands/clean"}},m={},d=[{value:"Dialects",id:"dialects",level:3},{value:"Scalafmt version",id:"scalafmt-version",level:3},{value:"Scalafmt options",id:"scalafmt-options",level:3},{value:"Excluding sources",id:"excluding-sources",level:3}],u={toc:d};function f(e){var t=e.components,a=(0,l.Z)(e,i);return(0,s.kt)("wrapper",(0,n.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"Scala CLI supports formatting your code using ",(0,s.kt)("a",{parentName:"p",href:"https://scalameta.org/scalafmt/"},"Scalafmt"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli fmt\n")),(0,s.kt)("p",null,"Under the hood, ",(0,s.kt)("inlineCode",{parentName:"p"},"scala-cli")," downloads and runs Scalafmt on your code."),(0,s.kt)("p",null,"If you\u2019re setting up a continuous integration (CI) server, ",(0,s.kt)("inlineCode",{parentName:"p"},"scala-cli")," also has you covered.\nYou can check formatting correctness using a ",(0,s.kt)("inlineCode",{parentName:"p"},"--check")," flag:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli fmt --check\n")),(0,s.kt)("h3",{id:"dialects"},"Dialects"),(0,s.kt)("p",null,"Scala CLI also supports dialects that are passed to the formatter.\nThis value is only used if there is no ",(0,s.kt)("inlineCode",{parentName:"p"},".scalafmt.conf")," file.\nHowever, if it exists, then all configuration should be placed there.\nFor a list of all possible values, consult\nthe ",(0,s.kt)("a",{parentName:"p",href:"https://scalameta.org/scalafmt/docs/configuration.html#scala-dialects"},"official Scala Dialects documentation"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli fmt --dialect scala212\n")),(0,s.kt)("h3",{id:"scalafmt-version"},"Scalafmt version"),(0,s.kt)("p",null,"At this time, Scala CLI reads a ",(0,s.kt)("inlineCode",{parentName:"p"},"scalafmt")," version from ",(0,s.kt)("inlineCode",{parentName:"p"},".scalafmt.conf")," files. If the version is missing, Scala CLI\nthrows an error, stating that users should declare an explicit Scalafmt version. Since Scalafmt ",(0,s.kt)("inlineCode",{parentName:"p"},"3.5.0"),", this parameter\nis mandatory."),(0,s.kt)("p",null,"To configure the Scalafmt version, add the following to ",(0,s.kt)("inlineCode",{parentName:"p"},".scalafmt.conf"),". For example, to set the version to ",(0,s.kt)("inlineCode",{parentName:"p"},"3.5.0"),",\nadd the following line:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'version = "3.5.0"\n')),(0,s.kt)("h3",{id:"scalafmt-options"},"Scalafmt options"),(0,s.kt)("p",null,"It is possible to pass native ",(0,s.kt)("inlineCode",{parentName:"p"},"scalafmt")," options with the ",(0,s.kt)("inlineCode",{parentName:"p"},"-F")," (short for ",(0,s.kt)("inlineCode",{parentName:"p"},"--scalafmt-arg"),"), for example:"),(0,s.kt)(o.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli fmt -F --version\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"scalafmt 3.5.8\n"))),(0,s.kt)("p",null,"For the available options please refer to ",(0,s.kt)("inlineCode",{parentName:"p"},"scalafmt")," help, which can be viewed with the ",(0,s.kt)("inlineCode",{parentName:"p"},"--scalafmt-help")," option (which\nis just an alias for ",(0,s.kt)("inlineCode",{parentName:"p"},"-F --help"),"):"),(0,s.kt)(o.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli fmt --scalafmt-help\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"scalafmt 3.5.8\nUsage: scalafmt [options] [<file>...]\n\n  -h, --help               prints this usage text\n  -v, --version            print version \n(...)\n"))),(0,s.kt)("h3",{id:"excluding-sources"},"Excluding sources"),(0,s.kt)("p",null,"Because of the way Scala CLI invokes ",(0,s.kt)("inlineCode",{parentName:"p"},"scalafmt")," under the hood, sources are always being passed to it explicitly. This\nin turn means that regardless of how the sources were passed, ",(0,s.kt)("inlineCode",{parentName:"p"},"scalafmt")," exclusion paths (the ",(0,s.kt)("inlineCode",{parentName:"p"},"project.excludePaths"),")\nwould be ignored. In order to prevent that from happening, the ",(0,s.kt)("inlineCode",{parentName:"p"},"--respect-project-filters")," option is set to ",(0,s.kt)("inlineCode",{parentName:"p"},"true")," by\ndefault."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text",metastring:"title=.scalafmt.conf",title:".scalafmt.conf"},'version = 3.5.8\nrunner.dialect = scala3\nproject {\n  includePaths = [\n    "glob:**.scala",\n    "regex:.*\\\\.sc"\n  ]\n  excludePaths = [\n    "glob:**/should/not/format/**.scala"\n  ]\n}\n')),(0,s.kt)(o.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli fmt . --check\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"All files are formatted with scalafmt :)\n"))),(0,s.kt)("p",null,"You can explicitly set it to false if you want to disregard any filters configured in the ",(0,s.kt)("inlineCode",{parentName:"p"},"project.excludePaths")," setting\nin your ",(0,s.kt)("inlineCode",{parentName:"p"},".scalafmt.conf")," for any reason."),(0,s.kt)(o.v,{mdxType:"ChainedSnippets"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli fmt . --check --respect-project-filters=false\n")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-text"},"--- a/.../should/not/format/ShouldNotFormat.scala\n+++ b/.../should/not/format/ShouldNotFormat.scala\n@@ -1,3 +1,3 @@\n class ShouldNotFormat {\n-                       println()\n+  println()\n }\n"))))}f.isMDXComponent=!0}}]);