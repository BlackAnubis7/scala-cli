"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2516],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(t),m=i,g=d["".concat(s,".").concat(m)]||d[m]||u[m]||r;return t?a.createElement(g,l(l({ref:n},c),{},{components:t})):a.createElement(g,l({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=d;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9076:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return o},metadata:function(){return p},toc:function(){return u}});var a=t(3117),i=t(102),r=(t(7294),t(3905)),l=["components"],o={title:"Piping",sidebar_position:23},s="Piping",p={unversionedId:"guides/piping",id:"guides/piping",title:"Piping",description:"Instead of passing paths to your sources, you can also pipe your code via standard input:",source:"@site/docs/guides/piping.md",sourceDirName:"guides",slug:"/guides/piping",permalink:"/docs/guides/piping",draft:!1,editUrl:"https://github.com/Virtuslab/scala-cli/edit/main/website/docs/guides/piping.md",tags:[],version:"current",sidebarPosition:23,frontMatter:{title:"Piping",sidebar_position:23},sidebar:"tutorialSidebar",previous:{title:"Scala Native",permalink:"/docs/guides/scala-native"},next:{title:"Internals",permalink:"/docs/guides/internals"}},c={},u=[{value:"Wildcards",id:"wildcards",level:2},{value:"Examples",id:"examples",level:2},{value:"Mixing piped sources with on-disk ones",id:"mixing-piped-sources-with-on-disk-ones",level:2}],d={toc:u};function m(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"piping"},"Piping"),(0,r.kt)("p",null,"Instead of passing paths to your sources, you can also pipe your code via standard input:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo '@main def hello() = println(\"Hello\")' | scala-cli _\n# Hello\n")),(0,r.kt)("h2",{id:"wildcards"},"Wildcards"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," wildcard implies that the piped code is a standard Scala app.\nIt is also possible to pass a script or Java code, when using the appropriate wildcard.\nThe available options are as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"for standard Scala code use ",(0,r.kt)("inlineCode",{parentName:"li"},"_"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"_.scala")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"-.scala"),";"),(0,r.kt)("li",{parentName:"ul"},"for Scala scripts use ",(0,r.kt)("inlineCode",{parentName:"li"},"-"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"_.sc")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"-.sc"),";"),(0,r.kt)("li",{parentName:"ul"},"for Java code use ",(0,r.kt)("inlineCode",{parentName:"li"},"_.java")," or ",(0,r.kt)("inlineCode",{parentName:"li"},"-.java"),".")),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"scripts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'println(\"Hello\")' | scala-cli _.sc\n# Hello\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Scala code")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo '@main def hello() = println(\"Hello\")' | scala-cli _.scala\n# Hello\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Java code")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'class Hello { public static void main(String args[]) { System.out.println(\"Hello\"); } }' | scala-cli _.java\n# Hello\n")),(0,r.kt)("h2",{id:"mixing-piped-sources-with-on-disk-ones"},"Mixing piped sources with on-disk ones"),(0,r.kt)("p",null,"It is also possible to pipe some code via standard input, while the rest of your code is on-disk."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'case class HelloMessage(msg: String)' > HelloMessage.scala\necho '@main def hello() = println(HelloMessage(msg = \"Hello\").msg)' | scala-cli _ HelloMessage.scala\n# Hello\n")))}m.isMDXComponent=!0}}]);